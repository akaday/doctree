#@since 2.3.0
= class Thread::Mutex < Object
alias Mutex
#@else
= class Mutex < Object
#@end

Mutex(Mutal Exclusion = 相互排他ロック)は共有データを並行アクセスから保護する
ためにあります。Mutex の典型的な使い方は(m を Mutex オブジェクトとします):

  m.lock
  begin
    # m によって保護されたクリティカルセクション
  ensure
    m.unlock
  end

または、より簡単に

  m.synchronize {
    # m によって保護されたクリティカルセクション
  }

== Class Methods

--- new -> Thread::Mutex
新しい mutex を生成して返します。

#@#noexample :Mutex#unlock 等を参照

== Instance Methods

#@until 1.9.1
--- exclusive_unlock { ... } -> self | nil
ロックを解放し、ロック待ちになっているスレッドを実行可能状態に
した後、ブロックを実行します。

ブロックの実行が終了するまで、スレッドは切り替わりません。

@return self がロックされていなければ nil を返します。そうでなければself を返します。
#@end

--- lock -> self
mutex オブジェクトをロックします。一度に一つのス
レッドだけが mutex をロックできます。既にロックされている mutex
に対してロックを行おうとしたスレッドは mutex のロックが解放さ
れるまで、実行が停止されます。

@raise ThreadError self 既にカレントスレッドにロックされている場合に発
                   生します。
#@since 2.0.0
                   また、[[m:Signal.#trap]] に指定したハンドラ内で実行
                   した場合に発生します。
#@end

#@#noexample Thread::Mutex#unlock を参照

@see [[m:Thread::Mutex#unlock]]

--- locked? -> bool
mutex がロックされている時、真を返します。

#@samplecode 例
m = Mutex.new
m.locked? # => false
m.lock
m.locked? # => true
#@end

--- synchronize { ... } -> object

mutex をロックし、ブロックを実行します。実行後に必ず mutex のロックを解放します。

ブロックが最後に評価した値を返します。

@raise ThreadError self 既にカレントスレッドにロックされている場合に発
                   生します。
#@since 2.0.0
                   また、[[m:Signal.#trap]] に指定したハンドラ内で実行
                   した場合に発生します。
#@end

#@samplecode 例
m = Mutex.new
result = m.synchronize do
  m.locked? # => true
  # critical part
  "result"
end
m.locked? # => false
result # => "result"
#@end

--- try_lock -> bool
mutex をロックしようとして、ロックが成功した場合、真を返します。
ロックできなかった場合にはブロックせず偽を返します。

#@samplecode 例
m = Mutex.new
m.try_lock # => true
m.try_lock # => false
#@end

#@since 1.9.1
--- unlock     -> self
#@else
--- unlock     -> self | nil
#@end
mutex のロックを解放します。mutex のロック待ちになっていたスレッドの実行は再開されます。

#@since 1.9.1
@return self を返します。
#@else
@return self がロックされていなければ nil を返します。そうでなければself を返します。
#@end

例:

 m = Mutex.new
 begin 
   m.lock
   # critical part
 ensure
   m.unlock
 end

#@since 1.9.1
Mutex はロックしたスレッド以外からロックを開放することは出来ません。
ロックしたスレッド以外から unlock が呼ばれると ThreadError が発生します。

 m = Mutex.new
 m.lock
 Thread.new do
   m.unlock # => ThreadError
 end.join

@raise ThreadError self がロックされていない場合や self をロックしたス
                   レッド以外から呼ばれた場合に発生します。
#@since 2.0.0
                   また、[[m:Signal.#trap]] に指定したハンドラ内で実行
                   した場合に発生します。
#@end
#@end

#@since 1.9.1
--- sleep(timeout = nil)    -> Integer

与えられた秒数の間ロックを解除してスリープして、実行後にまたロックします。

@param timeout スリープする秒数を指定します。省略するとスリープし続けます。

#@since 3.1
@return タイムアウトした時は nil を、それ以外はスリープしていた秒数を返します。
#@else
@return スリープしていた秒数を返します。
#@end

@raise ThreadError 自身がカレントスレッドによってロックされていない場合に発生します。

#@since 2.0.0
[注意] 2.0 以降ではスリープ中でも、シグナルを受信した場合などに実行が再
開(spurious wakeup)される場合がある点に注意してください。
#@end

#@samplecode 例
m = Mutex.new
th = Thread.new do
  m.lock
  m.sleep(2)
end
th.status # => "run"
sleep 1
th.status # => "sleep"
sleep 1
th.status # => false
#@end

#@end

#@since 2.0.0
--- owned? -> bool

self がカレントスレッドによってロックされている場合に true を返します。
そうでない場合に false を返します。

#@until 2.1.0
[注意] このメソッドは実験的な機能として提供されています。仕様が変更にな
る可能性があります。
#@end

#@samplecode 例
m = Mutex.new
m.owned? # => false
m.lock
Thread.new do
  m.owned? # => false
end.join
m.owned? # => true
#@end

#@end
