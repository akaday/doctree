
= module JSON::Generator::GeneratorMethods::Array
alias JSON::Ext::Generator::GeneratorMethods::Array

[[c:Array]] に JSON で使用するインスタンスメソッドを追加するためのモジュールです。

== Public Instance Methods
--- to_json(state_or_hash = nil) -> String

自身から生成した JSON 形式の文字列を返します。

@param state_or_hash 生成する JSON 形式の文字列をカスタマイズするため
                     に [[c:JSON::State]] のインスタンスか、
                     [[m:JSON::State.new]] の引数と同じ [[c:Hash]] を
                     指定します。

#@samplecode 例
require "json"

[1, 2, 3].to_json # => "[1,2,3]"
#@end

= module JSON::Generator::GeneratorMethods::FalseClass
alias JSON::Ext::Generator::GeneratorMethods::FalseClass

[[c:FalseClass]] に JSON で使用するインスタンスメソッドを追加するためのモジュールです。

== Public Instance Methods
--- to_json(state_or_hash = nil) -> String

自身から生成した JSON 形式の文字列を返します。

"false" という文字列を返します。

@param state_or_hash 生成する JSON 形式の文字列をカスタマイズするため
                     に [[c:JSON::State]] のインスタンスか、
                     [[m:JSON::State.new]] の引数と同じ [[c:Hash]] を
                     指定します。

#@samplecode 例
require "json"

false.to_json # => "false"
#@end

= module JSON::Generator::GeneratorMethods::Float
alias JSON::Ext::Generator::GeneratorMethods::Float

[[c:Float]] に JSON で使用するインスタンスメソッドを追加するためのモジュールです。

== Public Instance Methods
--- to_json(state_or_hash = nil) -> String

自身から生成した JSON 形式の文字列を返します。

@param state_or_hash 生成する JSON 形式の文字列をカスタマイズするため
                     に [[c:JSON::State]] のインスタンスか、
                     [[m:JSON::State.new]] の引数と同じ [[c:Hash]] を
                     指定します。

#@samplecode 例
require "json"

(1.0).to_json # => "1.0"
#@end

= module JSON::Generator::GeneratorMethods::Hash
alias JSON::Ext::Generator::GeneratorMethods::Hash

[[c:Hash]] に JSON で使用するインスタンスメソッドを追加するためのモジュールです。

== Public Instance Methods
--- to_json(state_or_hash = nil) -> String

自身から生成した JSON 形式の文字列を返します。

@param state_or_hash 生成する JSON 形式の文字列をカスタマイズするため
                     に [[c:JSON::State]] のインスタンスか、
                     [[m:JSON::State.new]] の引数と同じ [[c:Hash]] を
                     指定します。

#@samplecode 例
require "json"

person = { "name" => "tanaka", "age" => 19 }
person.to_json # => "{\"name\":\"tanaka\",\"age\":19}"
#@end

= module JSON::Generator::GeneratorMethods::Integer
alias JSON::Ext::Generator::GeneratorMethods::Integer

[[c:Integer]] に JSON で使用するインスタンスメソッドを追加するためのモジュールです。

== Public Instance Methods
--- to_json(state_or_hash = nil) -> String

自身から生成した JSON 形式の文字列を返します。

@param state_or_hash 生成する JSON 形式の文字列をカスタマイズするため
                     に [[c:JSON::State]] のインスタンスか、
                     [[m:JSON::State.new]] の引数と同じ [[c:Hash]] を
                     指定します。

#@samplecode 例
require "json"

10.to_json # => "10"
#@end

= module JSON::Generator::GeneratorMethods::NilClass
alias JSON::Ext::Generator::GeneratorMethods::NilClass

[[c:NilClass]] に JSON で使用するインスタンスメソッドを追加するためのモジュールです。

== Public Instance Methods
--- to_json(state_or_hash = nil) -> String

自身から生成した JSON 形式の文字列を返します。

"null" という文字列を返します。

@param state_or_hash 生成する JSON 形式の文字列をカスタマイズするため
                     に [[c:JSON::State]] のインスタンスか、
                     [[m:JSON::State.new]] の引数と同じ [[c:Hash]] を
                     指定します。

#@samplecode 例
require "json"

nil.to_json # => "null"
#@end

= module JSON::Generator::GeneratorMethods::Object
alias JSON::Ext::Generator::GeneratorMethods::Object

[[c:Object]] に JSON で使用するインスタンスメソッドを追加するためのモジュールです。

== Public Instance Methods
--- to_json(state_or_hash = nil) -> String

自身を to_s で文字列にした結果を JSON 形式の文字列に変換して返します。

このメソッドはあるオブジェクトに to_json メソッドが定義されていない場合に使用する
フォールバックのためのメソッドです。

@param state_or_hash 生成する JSON 形式の文字列をカスタマイズするため
                     に [[c:JSON::State]] のインスタンスか、
                     [[m:JSON::State.new]] の引数と同じ [[c:Hash]] を
                     指定します。

#@samplecode 例
require "json"

class Person
  attr :name, :age

  def initialize(name, age)
    @name, @age = name, age
  end
end

tanaka = Person.new("tanaka", 29)

tanaka.to_json # => "\"#<Person:0x00007ffdec0167c8>\""
tanaka.method(:to_json).owner # => JSON::Ext::Generator::GeneratorMethods::Object
#@end

= module JSON::Generator::GeneratorMethods::String
alias JSON::Ext::Generator::GeneratorMethods::String

[[c:String]] に JSON で使用するインスタンスメソッドを追加するためのモジュールです。

== Public Instance Methods
--- to_json(state_or_hash = nil) -> String

自身から生成した JSON 形式の文字列を返します。

自身のエンコードは UTF-8 であるべきです。
"\u????" のように UTF-16 ビッグエンディアンでエンコードされた文字列を返すことがあります。

@param state_or_hash 生成する JSON 形式の文字列をカスタマイズするため
                     に [[c:JSON::State]] のインスタンスか、
                     [[m:JSON::State.new]] の引数と同じ [[c:Hash]] を
                     指定します。

#@samplecode 例
require "json"

puts "test".to_json                    # => "test"
puts '"'.to_json                       # => "\""
puts "\\".to_json                      # => "\\"
puts "𤘩宮城".to_json(ascii_only: true) # => "\ud851\ude29\u5bae\u57ce"
#@end

--- to_json_raw -> String

自身に対して [[m:JSON::Generator::GeneratorMethods::String#to_json_raw_object]] を呼び出して [[m:JSON::Generator::GeneratorMethods::Hash#to_json]] した結果を返します。

@see [[m:JSON::Generator::GeneratorMethods::String#to_json_raw_object]], [[m:JSON::Generator::GeneratorMethods::Hash#to_json]]

--- to_json_raw_object -> Hash

生の文字列を格納したハッシュを生成します。

このメソッドは UTF-8 の文字列ではなく生の文字列を JSON に変換する場合に使用してください。

  require 'json'
  "にほんご".encode("euc-jp").to_json_raw_object
  # => {"json_class"=>"String", "raw"=>[164, 203, 164, 219, 164, 243, 164, 180]}
  "にほんご".encode("euc-jp").to_json # source sequence is illegal/malformed (JSON::GeneratorError)

= module JSON::Generator::GeneratorMethods::String::Extend
alias JSON::Ext::Generator::GeneratorMethods::String::Extend

[[c:String]] に JSON で使用する特異メソッドを追加するためのモジュールです。

== Class Methods
--- json_create(hash) -> String

JSON のオブジェクトから Ruby の文字列を生成して返します。

@param hash キーとして "raw" という文字列を持ち、その値として数値の配列を持つハッシュを指定します。

  require 'json'
  String.json_create({"raw" => [0x41, 0x42, 0x43]}) # => "ABC"

= module JSON::Generator::GeneratorMethods::TrueClass
alias JSON::Ext::Generator::GeneratorMethods::TrueClass

[[c:TrueClass]] に JSON で使用するインスタンスメソッドを追加するためのモジュールです。

== Public Instance Methods
--- to_json(state_or_hash = nil) -> String

自身から生成した JSON 形式の文字列を返します。

"true" という文字列を返します。

@param state_or_hash 生成する JSON 形式の文字列をカスタマイズするため
                     に [[c:JSON::State]] のインスタンスか、
                     [[m:JSON::State.new]] の引数と同じ [[c:Hash]] を
                     指定します。

#@samplecode 例
require "json"

true.to_json # => "true"
#@end
